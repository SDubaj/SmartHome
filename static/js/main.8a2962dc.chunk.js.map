{"version":3,"sources":["components/AddRoom.tsx","components/RoomBlock.tsx","components/RoomBlocks.tsx","components/Main.tsx","components/Settings.tsx","App.tsx","index.tsx"],"names":["AddRoom","props","useState","name","setName","onSubmit","event","preventDefault","data","isOn","toggleShow","handleAdd","type","onChange","console","log","currentTarget","value","RoomBlock","toggleSwitch","setToggleSwitch","className","onClick","window","confirm","handleDelete","id","checked","handleToggle","to","pathname","query","RoomBlocks","rooms","map","item","index","key","Main","addEventListener","e","setRooms","show","setShow","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","a","splice","i","Settings","match","device","setDevice","isShown","randomNumber","setRandomNumber","roomId","Number","params","axios","get","then","res","random1","slice","random2","catch","err","message","devices","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a2962dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { IHandleAddRoom } from './Main';\n// type handleAdd = (a: any) => any;\n// interface MyClassProps {\n//     onChange: MyFunctionType;\n//     niceProp: string;\n// }\n\ninterface Props extends IHandleAddRoom {\n    show:boolean,\n    toggleShow: () => void,\n    handleAdd: (a:any) => void\n}\nconst AddRoom = (props:Props) =>{\n    const [name, setName] = useState(\"\");\n    //var isOn = false;\n    // var shows:boolean;\n    // const [show, setShow] = useState(props.show)\n\n    // const toggleShow = (e : React.MouseEvent<HTMLElement>) =>{\n    //     e.preventDefault();\n    //     setShow(!show);\n    //     console.log(show);\n    // }\n    const handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        let data = \n            {\n            name:name,\n            isOn:false\n        }\n    ;\n        \n    // var retrievedObject = [{}, {}, {}];\n    //    retrievedObject = JSON.parse(localStorage.getItem('Rooms') || '[]');\n    //    console.log(retrievedObject);\n        //  if(retrievedObject != null ){\n            \n        //  retrievedObject.push(data);\n        // }\n        // localStorage.setItem('Rooms', JSON.stringify(retrievedObject));\n        props.toggleShow();\n        props.handleAdd(data);\n    }\n    const handleChange = (event : React.FormEvent<HTMLInputElement>) => {\n        console.log(event.currentTarget.value);\n        setName(event.currentTarget.value);\n\n\n    }\n//     var form = <div>\n//     <form onSubmit={handleSubmit} >\n//   <label>\n//     Imię:\n//     <input type=\"text\" name=\"name\" onChange={handleChange}/>\n//   </label>\n//   <button type=\"submit\" value=\"Wyślij\"  onClick={props.toggle}>Wyslij</button>\n// </form>\n//     </div>\n    return(\n        <div>\n\n            {/* <div onClick={e=> setShow(!show) }>+</div> */}\n\n            {/* <div onClick={toggleShow }>+</div> */}\n            {/* {show ? \"\" : form} */}\n            <form  onSubmit={handleSubmit}>\n                <label>\n                    Nazwa Pokoju:\n                    <input type=\"text\" name=\"name\" onChange={handleChange} />\n                </label>\n                \n                <button type=\"submit\" value=\"Wyślij\"  >Wyslij</button>\n            </form>\n            \n            </div>\n        \n    );\n      \n\n}\n\nexport default AddRoom;","import React, { SyntheticEvent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport { IHandles } from './Main';\n\ninterface Props extends IHandles  {\n    name: string,\n    isOn: boolean,\n    id:number\n}\n\n\nconst RoomBlock: React.FC<Props> = (props:Props ) =>{\n    // let shows:boolean;\n    // shows=true;\n    // const show = (e : React.MouseEvent<HTMLElement>) =>{\n    //     e.preventDefault();\n    //     console.log(\"show\");\n    // }\n\n    const [toggleSwitch, setToggleSwitch] = useState(props.isOn);\n    const handleChange = (checked: boolean, event: MouseEvent | SyntheticEvent<MouseEvent | KeyboardEvent, Event>) => {\n        //  setToggleSwitch((prevState) => !prevState);  \n        // var retrievedObject: roomsType[];\n        // retrievedObject = JSON.parse(localStorage.getItem('Rooms') || '[]');\n        // retrievedObject[id].isOn = !toggleSwitch;\n        // localStorage.setItem('Rooms', JSON.stringify(retrievedObject));\n        setToggleSwitch(!toggleSwitch);\n        props.handleToggle(props.id,!toggleSwitch);\n    }\n\n    const handleDelete = (event: React.MouseEvent<HTMLDivElement>) =>{\n        if (window.confirm('Are you sure you wish to delete this room?')){\n        // var retrievedObject: roomsType[];\n        // retrievedObject = JSON.parse(localStorage.getItem('Rooms') || '[]');\n        \n        // retrievedObject.splice(id,1);\n\n        // localStorage.setItem('Rooms', JSON.stringify(retrievedObject));\n        props.handleDelete(props.id);\n    }\n    }\n\n     return  (\n        \n         <div className=\"roomBlock\">\n            <h3>{props.name}</h3>    \n            <div onClick={handleDelete}>X</div>\n             <label>\n             <span>ON/OFF</span>\n             <Switch  onChange={handleChange} checked={toggleSwitch} />\n             </label>\n             <Link to={`/settings/${props.id}`} >Settings</Link>\n             <Link to={{pathname: `settings/${props.id}`, query: { id:props.id }}}></Link>\n         </div>\n     )\n    }\n\n\nexport default RoomBlock;","import React from 'react';\nimport { IHandles, IRoom } from './Main';\nimport RoomBlock from './RoomBlock';\n\n\n// export interface Room {\n//       name: string,\n//       isOn:boolean\n//   }\n\n  interface RoomProps extends IHandles {\n      rooms:IRoom[]\n  }\n\nconst RoomBlocks: React.FC<RoomProps> = (props:RoomProps ) =>{\n        return(\n    <ul>\n        {props.rooms.map((item, index) => (\n        <RoomBlock key={index} id={index} name={item.name} isOn={item.isOn} handleDelete={props.handleDelete} handleToggle={props.handleToggle}/>\n        ))}\n  </ul>)\n}\n\nexport default RoomBlocks;","import React, { useEffect, useState } from 'react';\nimport AddRoom from './AddRoom';\nimport RoomBlocks from './RoomBlocks';\n\n// interface roomsType{\n//     name:string,\n//     isOn:boolean\n// }\nexport interface Devices{\n  device:string,\n  isOn:boolean,\n  temp?:number,\n  brightness?:number\n}\n\nexport interface IRoom{\n  name:string,\n  isOn:boolean,\n  devices: [Devices]\n}\n\nexport interface IHandles{\n  handleDelete: (a:any) => void,\n  handleToggle: (id:number, a:boolean) => void,\n      \n    \n}\nexport interface IHandleAddRoom{\n  toggleShow: () => void,\n  handleAdd: (a:any) => void\n}\n\n\nconst Main = () =>{\n    // const handleDelete = (event: React.MouseEvent<HTMLDivElement>) =>{\n    //     if (window.confirm('Are you sure you wish to delete this room?')){\n    //     var retrievedObject: roomsType[];\n    //     retrievedObject = JSON.parse(localStorage.getItem('Rooms') || '[]');\n        \n    //     retrievedObject.splice(id,1);\n\n    //     localStorage.setItem('Rooms', JSON.stringify(retrievedObject));\n    // }\n    // }\n\n\n\n    window.addEventListener('storage',e => console.log())\n    //  const object  = JSON.parse(localStorage.getItem('Rooms') || '[]');\n    const [rooms, setRooms] = useState<IRoom[]>([]);\n    const [show, setShow] = useState(false)\n     //setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n\n    useEffect(() => {\n         setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n      },[]);\n\n      useEffect(() => {\n        // window.addEventListener('storage', () => {\n        //     // When local storage changes, dump the list to\n        //     // the console.\n        //     console.log(\"ss\");\n        //     setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n        //   });\n        //  setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n        localStorage.setItem('Rooms', JSON.stringify(rooms));\n        console.log(rooms);\n      },[rooms]);\n      \n    \n\n    const toggleShow = () =>{\n        setShow(!show);\n        // if(show===true){\n        //   setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n        // }\n    }\n    const handleAdd = (a:any) => {\n      setRooms(rooms => [...rooms,  a ]);\n      \n      //setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'))\n      \n  }\n  const handleToggle = (id:number, a:boolean) => {\n    // setRooms(rooms => [...rooms,  a ]);\n    // console.log('toggle' + id);\n    //setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'))\n    setRooms(\n    rooms.map((item,i)  => \n      i === id \n      ? {...item, isOn : !item.isOn} \n      : item ))\n    \n}\n  const handleDelete= (a:any) => {\n    setRooms(rooms.splice(a,1))\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\n    setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'))\n    console.log(a);\n}\n\n    return(\n        <div>\n            {/* <div onClick={e=> setShow(!show) }>+</div> */}\n            <div className=\"blocks\" onClick={toggleShow }><h1>+</h1></div>\n            {show ? <AddRoom show={show} toggleShow={toggleShow} handleAdd={handleAdd}/> : \"\"}\n            <RoomBlocks rooms={rooms} handleDelete={handleDelete} handleToggle={handleToggle}  />\n            \n            </div>\n        \n    );\n      \n\n}\n\nexport default Main;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { IRoom } from './Main';\r\n\r\n\r\ntype TParams = { id: string };\r\ninterface Props{\r\n  id:number\r\n}\r\n\r\nfunction Settings({ match }: RouteComponentProps<TParams>,{id}:Props) {\r\n\r\n  const [rooms, setRooms] = useState<IRoom[]>([]);\r\n  const [device, setDevice] = useState(\"\");\r\n  const [isShown, setIsShown] = useState(false);\r\n  const [randomNumber, setRandomNumber] = useState<number[]>([]);\r\n  var roomId = Number(match.params.id);\r\n\r\n  //get two random numbers from API\r\n  useEffect(() => {\r\n    axios.get('https://www.random.org/integers/?num=2&min=1&max=100&col=2&base=10&format=plain&rnd=new')\r\n        .then(res => { \r\n          var random1= Number(res.data.slice(0,2));\r\n          var random2 = Number(res.data.slice(3,5));\r\n           setRandomNumber(randomNumber => [...randomNumber,  random1 ]);\r\n           setRandomNumber(randomNumber => [...randomNumber,  random2 ]);\r\n          console.log(res.data);\r\n        })\r\n        .catch(err => {\r\n            console.log(err.message);\r\n        })\r\n}, []);\r\n\r\nconsole.log(randomNumber);\r\n\r\n  useEffect(() => {\r\n    setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\r\n },[]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n    console.log(\"zmiana\" ); \r\n  },[rooms]);\r\n\r\nconst handleChange = (event : React.FormEvent<HTMLInputElement>) => {\r\n  console.log(event.currentTarget.value);\r\n  setDevice(event.currentTarget.value);\r\n}\r\nconst handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n  let data = \r\n      {\r\n      device:device,\r\n      isOn:false\r\n      \r\n  }\r\n  rooms[roomId].devices = [data];\r\n  localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n};\r\n\r\n  return (\r\n  <div>\r\n\r\n     {/* <h2>This is a page for product with ID: {match.params.id} </h2>   */}\r\n     <div>Temp:{randomNumber[0]} Humidity: {randomNumber[1]}</div>\r\n     \r\n     { isShown ?\r\n       <form  onSubmit={handleSubmit}>\r\n                <label>\r\n                    \r\n                    <input type=\"text\" name=\"name\" onChange={handleChange} />\r\n                </label> \r\n                \r\n                <button type=\"submit\" value=\"Wyślij\"  >Wyslij</button>\r\n      </form>\r\n      :\"\"\r\n      }\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n\r\n\r\n        ","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport { Route,  Switch } from 'react-router-dom'\nimport Settings from './components/Settings';\n\n\nconst App = () => {\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\"> \n              <div><h3>Hi user</h3></div>\n              <div><h5>Welcome Home ! </h5></div>\n              <Switch>\n          <Route  path=\"/\" exact component={Main} />\n          <Route exact path=\"/settings/:id\" component={Settings} />\n        </Switch>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n        <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}