{"version":3,"sources":["components/AddRoom.tsx","components/RoomBlock.tsx","components/RoomBlocks.tsx","components/Main.tsx","components/AddDevice.tsx","components/DeviceBlock.tsx","components/Settings.tsx","App.tsx","index.tsx"],"names":["AddRoom","props","useState","name","setName","className","onSubmit","event","preventDefault","data","isOn","devices","toggleShow","handleAdd","placeholder","type","onChange","console","log","currentTarget","value","RoomBlock","toggleSwitch","setToggleSwitch","device","length","onColor","offColor","checked","handleToggle","id","to","src","height","width","onClick","window","confirm","handleDelete","RoomBlocks","rooms","map","item","index","key","Main","addEventListener","e","setRooms","show","setShow","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","a","splice","i","AddDevice","setDevice","deviceType","setDeviceType","handleType","DeviceBlock","Settings","match","isShown","setIsShown","loading","setLoading","randomNumber","setRandomNumber","roomId","Number","params","axios","get","then","res","random1","slice","random2","catch","err","message","alt","b","push","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"sQA6CeA,EApCmB,SAACC,GAAgB,IAAD,EACtBC,mBAAS,IADa,mBACvCC,EADuC,KACjCC,EADiC,KAiB9C,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,gBAAe,yCAC9B,0BAAOC,SAlBM,SAACC,GAClBA,EAAMC,iBACN,IAAIC,EACA,CACAN,KAAKA,EACLO,MAAK,EACLC,QAAQ,IAEZV,EAAMW,aACNX,EAAMY,UAAUJ,KAYR,+BACI,2BAAOK,YAAY,OAAOC,KAAK,OAAOZ,KAAK,OAAOa,SAX7C,SAACT,GAClBU,QAAQC,IAAIX,EAAMY,cAAcC,OAChChB,EAAQG,EAAMY,cAAcC,WAWpB,4BAAQL,KAAK,SAASK,MAAM,QAA5B,a,wBCqBDC,EA3CoB,SAACpB,GAAiB,IAAD,EACRC,mBAASD,EAAMS,MADP,mBACzCY,EADyC,KAC3BC,EAD2B,KAmB/C,OAEI,yBAAKlB,UAAU,aAGR,4BAAKJ,EAAME,MACX,wBAAIE,UAAU,iBAAd,WAAuCJ,EAAMuB,OAAOC,QAKvD,yBAAKpB,UAAU,eAEZ,kBAAC,IAAD,CAAQqB,QAAQ,UAAUC,SAAS,UAAUX,SA5BpC,SAACY,EAAkBrB,GACpCgB,GAAiBD,GACjBrB,EAAM4B,aAAa5B,EAAM6B,IAAIR,IA0BgDM,QAASN,IAC9E,kBAAC,IAAD,CAAMS,GAAE,8BAAyB9B,EAAM6B,KAAO,yBAAKE,IAAI,eAAeC,OAAO,OAAOC,MAAM,UAC1F,yBAAK7B,UAAU,QAAQ8B,QAzBd,SAAC5B,GACd6B,OAAOC,QAAQ,+CACnBpC,EAAMqC,aAAarC,EAAM6B,MAuB6B,yBAAKE,IAAI,QAAQC,OAAO,OAAOC,MAAM,aCzBpFK,EAbyB,SAACtC,GACjC,OAEE,yBAAKI,UAAU,aACVJ,EAAMuC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACjB,kBAAC,EAAD,CAAWC,IAAKD,EAAOb,GAAIa,EAAOxC,KAAMuC,EAAKvC,KAAMqB,OAAQkB,EAAK/B,QAASD,KAAMgC,EAAKhC,KAAM4B,aAAcrC,EAAMqC,aAAcT,aAAc5B,EAAM4B,oBCyF/IgB,EArEF,WACTT,OAAOU,iBAAiB,WAAU,SAAAC,GAAC,OAAI9B,QAAQC,SADjC,MAIYhB,mBAAkB,IAJ9B,mBAIPsC,EAJO,KAIAQ,EAJA,OAKU9C,oBAAS,GALnB,mBAKP+C,EALO,KAKDC,EALC,KAOdC,qBAAU,WACNH,EAASI,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,SACrD,IAGJJ,qBAAU,WACRG,aAAaE,QAAQ,QAASJ,KAAKK,UAAUjB,MAC7C,CAACA,IAGL,IAAM5B,EAAa,WACfsC,GAASD,IAuBX,OACE,6BAEI,yBAAK5C,UAAU,uBACZ,yBAAK2B,IAAI,WAAWC,OAAO,OAAOC,MAAM,SACxC,wCACA,kDACF,4BAAQ7B,UAAU,YAAY8B,QAASvB,GAAvC,MAIH,6BAEIqC,EAAO,kBAAC,EAAD,CAASA,KAAMA,EAAMrC,WAAYA,EAAYC,UAjC5C,SAAC6C,GACfV,GAAS,SAAAR,GAAK,4BAAQA,GAAR,CAAgBkB,UAgCsD,IAK9E,kBAAC,EAAD,CAAYlB,MAAOA,EAAOF,aAzBhB,SAACoB,GACnBV,EAASR,EAAMmB,OAAOD,EAAE,IACxBJ,aAAaE,QAAQ,QAASJ,KAAKK,UAAUjB,IAC7CQ,EAASI,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,OACrDtC,QAAQC,IAAIwC,IAqBkD7B,aAlC3C,SAACC,EAAW4B,GAC/BV,EACAR,EAAMC,KAAI,SAACC,EAAKkB,GAAN,OACRA,IAAM9B,EAAN,eACMY,EADN,CACYhC,MAAQgC,EAAKhC,OACvBgC,W,wBCFOmB,EAhDoB,SAAC5D,GAAiB,IAAD,EACpBC,mBAAS,IADW,mBACzCsB,EADyC,KACjCsC,EADiC,OAGZ5D,mBAAS,eAHG,mBAGzC6D,EAHyC,KAG7BC,EAH6B,KAqB1CC,EAAa,SAAC1D,GAChByD,EAAczD,EAAMY,cAAcC,QAEtC,OACI,yBAAKf,UAAU,wBACX,0BAAOC,SArBM,SAACC,GAClBA,EAAMC,iBACN,IAAIC,EACA,CACAe,OAAOA,EACPd,MAAK,EACLK,KAAKgD,EACL3C,MAAM,GAEVnB,EAAMW,aACNX,EAAMY,UAAUJ,KAYR,+BAEI,2BAAOK,YAAY,SAASC,KAAK,OAAOZ,KAAK,OAAOa,SAZ/C,SAACT,GAClBU,QAAQC,IAAIX,EAAMY,cAAcC,OAChC0C,EAAUvD,EAAMY,cAAcC,WAO1B,IAIa,6BACT,+BACC,8DACC,2BAAOQ,SAAO,EAACb,KAAK,QAAQK,MAAM,cAAcjB,KAAK,OAAOa,SAAUiD,IAFxE,eAGE,2BAAOlD,KAAK,QAAQK,MAAM,aAAajB,KAAK,OAAOa,SAAUiD,IAH/D,cAIE,2BAAOlD,KAAK,QAAQK,MAAM,SAASjB,KAAK,OAAOa,SAAUiD,IAJ3D,WAKQ,6BAER,4BAAQlD,KAAK,SAASK,MAAM,eAA5B,cCbD8C,EAxBsB,SAACjE,GAAiB,IAAD,EACVC,mBAASD,EAAMS,MADL,mBAC3CY,EAD2C,KAC7BC,EAD6B,KAOjD,OAEI,yBAAKlB,UAAU,eACX,yBAAKA,UAAU,aACX,4BAAKJ,EAAME,MACX,4BAAKF,EAAMc,KAAX,KAAmBd,EAAMmB,QAG9B,0BAAMf,UAAU,UACZ,kBAAC,IAAD,CAAQqB,QAAQ,UAAUC,SAAS,UAAUX,SAblC,WACnBO,GAAiBD,GACjBrB,EAAM4B,aAAa5B,EAAM6B,IAAIR,IAWgDM,QAASN,OC6H/E6C,MA9If,cAAuE,IAAnDC,EAAkD,EAAlDA,MAAkD,KAAXtC,GAE/B5B,mBAAkB,KAFwB,mBAE7DsC,EAF6D,KAEtDQ,EAFsD,OAKtC9C,oBAAS,GAL6B,mBAK7DmE,EAL6D,KAKpDC,EALoD,OAMtCpE,oBAAS,GAN6B,mBAM7DqE,EAN6D,KAMpDC,EANoD,OAO5BtE,mBAAmB,CAAC,EAAE,IAPM,mBAO7DuE,EAP6D,KAO/CC,EAP+C,KAQhEC,EAASC,OAAOR,EAAMS,OAAO/C,IAEjCqB,qBAAU,WACRH,EAASI,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,OACrDiB,GAAW,KACZ,IAGDrB,qBAAU,WACR2B,IAAMC,IAAI,2FACLC,MAAK,SAAAC,GACJ,IAAIC,EAASN,OAAOK,EAAIxE,KAAK0E,MAAM,EAAE,IACjCC,EAAUR,OAAOK,EAAIxE,KAAK0E,MAAM,EAAE,IACrCT,GAAgB,SAAAD,GAAY,MAAI,CAACS,MACjCR,GAAgB,SAAAD,GAAY,4BAAQA,GAAR,CAAuBW,OACpDnE,QAAQC,IAAI+D,EAAIxE,SAEjB4E,OAAM,SAAAC,GACHrE,QAAQC,IAAIoE,EAAIC,cAEzB,IAIDpC,qBAAU,WACRG,aAAaE,QAAQ,QAASJ,KAAKK,UAAUjB,IAC7CvB,QAAQC,IAAI,YACZ,CAACsB,IA2BL,IAAM5B,EAAa,WACjB0D,GAAYD,IA+BRxC,EAAe,SAACC,EAAW4B,GAE7BlB,EAAMmC,GAAQhE,QAAQmB,GAAIpB,KAAOgD,EACjCJ,aAAaE,QAAQ,QAASJ,KAAKK,UAAUjB,KAE/C,OACA,yBAAKnC,UAAU,YAMb,yBAAKA,UAAU,qBACb,kBAAC,IAAD,CAAMA,UAAU,aAAa0B,GAAG,eAAc,yBAAKC,IAAI,qBAAqBC,OAAO,OAAOC,MAAM,OAAOsD,IAAI,YAE3G,yBAAKnF,UAAU,eACb,4BAAKkE,EAAU,GAAK/B,EAAMmC,GAAQxE,MAChC,yBAAKE,UAAU,eACX,yBAAK2B,IAAI,gBAAgBC,OAAO,OAAOC,MAAM,SAC7C,4BAAKuC,EAAa,GAAlB,WACA,qCAGF,yBAAKpE,UAAU,mBACb,yBAAK2B,IAAI,iBAAiBC,OAAO,OAAOC,MAAM,SAC9C,4BAAKuC,EAAa,GAAlB,MACA,yCAEF,yBAAKpE,UAAU,kBAAkB8B,QAASvB,GAAa,oCAO5DyD,EACA,kBAAC,EAAD,CAAWA,QAASA,EAASzD,WAAYA,EAAYC,UAjE1C,SAAC6C,GAOjB,IAAI+B,EAAEjD,EAAMmC,GAAQhE,QACpB8E,EAAEC,KAAKhC,GACPlB,EAAMmC,GAAQhE,QAAU8E,EACxBxE,QAAQC,IAAIsB,EAAMmC,GAAQhE,SAQzB2C,aAAaE,QAAQ,QAASJ,KAAKK,UAAUjB,OAgDzC,GACD,yBAAKnC,UAAU,WACZkE,EAAU,OAAS/B,EAAMmC,GAAQhE,QAAQ8B,KAAI,SAACC,EAAMC,GAAP,OAC5C,kBAAC,EAAD,CAAaC,IAAKD,EAAOb,GAAIa,EAAOxC,KAAMuC,EAAKlB,OAAQd,KAAMgC,EAAKhC,KAAMK,KAAM2B,EAAK3B,KAAMK,MAAOsB,EAAKtB,MAAOS,aAAcA,UC/HrH8D,EAdH,WACV,OACE,yBAAKtF,UAAU,aAEP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuF,OAAK,EAACC,KAAK,cAAeC,UAAWjD,IAC5C,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,0BAA0BC,UAAW3B,OCJrE4B,IAASC,OACP,kBAAC,IAAD,KACM,kBAAC,EAAD,OAENC,SAASC,eAAe,W","file":"static/js/main.58a195a5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { IHandleAddRoom } from './Main';\n\ninterface Props extends IHandleAddRoom {\n    show:boolean,\n    toggleShow: () => void,\n    handleAdd: (a:any) => void\n}\n\nconst AddRoom: React.FC<Props>  = (props:Props) =>{\n    const [name, setName] = useState(\"\");\n    const handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        let data = \n            {\n            name:name,\n            isOn:false,\n            devices:[]\n        }\n        props.toggleShow();\n        props.handleAdd(data);\n    }\n    const handleChange = (event : React.FormEvent<HTMLInputElement>) => {\n        console.log(event.currentTarget.value);\n        setName(event.currentTarget.value);\n    }\n    return(\n        <div className=\"second-navbar\">\n            <div className=\"addRoomTitle\"><h2>Add room</h2></div>\n            <form  onSubmit={handleSubmit}>\n                \n                \n                <label>\n                    <input placeholder=\"Name\" type=\"text\" name=\"name\" onChange={handleChange} />\n                </label>\n                <button type=\"submit\" value=\"Send\">&#x2714;</button>\n            </form>\n            \n            </div>\n        \n    );\n      \n\n}\n\nexport default AddRoom;","import React, { SyntheticEvent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport { IHandles } from './Main';\n\ninterface Props extends IHandles  {\n    name: string,\n    isOn: boolean,\n    id:number,\n    device?:any\n}\n\n\nconst RoomBlock: React.FC<Props> = (props:Props ) =>{\n    const [toggleSwitch, setToggleSwitch] = useState(props.isOn);\n    // const [devicesAmount, setDevicesAmount] = useState(0);\n    // Switching room  - ON or OFF\n    const handleChange = (checked: boolean, event: MouseEvent | SyntheticEvent<MouseEvent | KeyboardEvent, Event>) => {\n        setToggleSwitch(!toggleSwitch);\n        props.handleToggle(props.id,!toggleSwitch);\n    }\n    // Deleting rooms \n    const handleDelete = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) =>{\n        if (window.confirm('Are you sure you wish to delete this room?')){\n        props.handleDelete(props.id);\n    }\n    }\n    // console.log(props.device);\n    // if(props.device!==undefined){\n    //     setDevicesAmount(props.device.length);\n    // }\n\n     return  (\n        \n         <div className=\"roomBlock\">\n            \n            \n                <h2>{props.name}</h2> \n                <h4 className=\"devicesAmount\">Devices:{props.device.length}</h4> \n            \n            \n             \n             {/* <span> ON/OFF</span> */}\n             <div className=\"roomOptions\">\n                 \n                <Switch onColor='#f57843' offColor=\"#f9a886\" onChange={handleChange} checked={toggleSwitch} />\n                <Link to={`/SmartHome/settings/${props.id}`} ><img src=\"settings.png\" height=\"30px\" width=\"30px\"/></Link>\n                <div className=\"close\" onClick={handleDelete}><img src=\"x.png\" height=\"30px\" width=\"30px\"/></div> \n            \n             </div>\n             \n         </div>\n     )\n    }\n\n\nexport default RoomBlock;","import React from 'react';\nimport { IHandles, IRoom } from './Main';\nimport RoomBlock from './RoomBlock';\n\n  interface RoomProps extends IHandles {\n      rooms:IRoom[]\n  }\n\n  //displaying blocks of rooms in main view\nconst RoomBlocks: React.FC<RoomProps> = (props:RoomProps ) =>{\n        return(\n      \n          <div className=\"flex-wrap\" >\n              {props.rooms.map((item, index) => (\n              <RoomBlock key={index} id={index} name={item.name} device={item.devices} isOn={item.isOn} handleDelete={props.handleDelete} handleToggle={props.handleToggle} />\n              ))}\n          </div>\n     \n  )\n\n}\n\nexport default RoomBlocks;","import React, { useEffect, useState } from 'react';\nimport AddRoom from './AddRoom';\nimport RoomBlocks from './RoomBlocks';\n\n// interface roomsType{\n//     name:string,\n//     isOn:boolean\n// }\n//device interface\nexport interface Devices{\n  device:string,\n  isOn:boolean,\n  type:string,\n  value:number\n}\n\n//room interface\nexport interface IRoom{\n  name:string,\n  isOn:boolean,\n  devices: [Devices]\n}\n//interface with room handlers - delete / toggle\nexport interface IHandles{\n  handleDelete: (a:any) => void,\n  handleToggle: (id:number, a:boolean) => void, \n}\n// interface with room handlers - addRoom , showForm\nexport interface IHandleAddRoom{\n  toggleShow: () => void,\n  handleAdd: (a:any) => void\n}\n\n\nconst Main = () =>{\n    window.addEventListener('storage',e => console.log())\n\n    //declare states\n    const [rooms, setRooms] = useState<IRoom[]>([]);\n    const [show, setShow] = useState(false);\n  //get rooms from localstorage\n    useEffect(() => {\n        setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n      },[]);\n\n    //set data to localstorage when rooms state changes\n    useEffect(() => {\n      localStorage.setItem('Rooms', JSON.stringify(rooms));\n    },[rooms]);\n  \n    //toggle form show\n  const toggleShow = () =>{\n      setShow(!show);\n  }\n  //add new room to room state\n  const handleAdd = (a:any) => {\n      setRooms(rooms => [...rooms,  a ]);\n  }\n  //Switch ON/OFF room with id\n  const handleToggle = (id:number, a:boolean) => {\n    setRooms(\n    rooms.map((item,i)  => \n      i === id \n      ? {...item, isOn : !item.isOn} \n      : item ))\n  }\n\n  //Delete room and update localstorage\n  const handleDelete= (a:any) => {\n    setRooms(rooms.splice(a,1))\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\n    setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'))\n    console.log(a);\n}\n\n    return(\n      <div>\n        \n          <div className=\"navbar navbar-light\">\n             <img src=\"user.png\" height=\"50px\" width=\"50px\" ></img>\n             <h1>Hi user!</h1>\n             <h3>Welcome to home ! </h3> \n           <button className=\"addButton\" onClick={toggleShow }>+</button>\n        \n          </div>\n\n        <div>\n           {/* if show is true show form */}\n           {show ? <AddRoom show={show} toggleShow={toggleShow} handleAdd={handleAdd}/> : \"\"} \n        </div>\n            \n        \n            {/* display rooms */}\n            <RoomBlocks rooms={rooms} handleDelete={handleDelete} handleToggle={handleToggle} />\n          \n          \n      </div>\n        \n    );\n      \n\n}\n\nexport default Main;","import React, { useState } from 'react';\r\n// import { IHandleAddRoom } from './Main';\r\n\r\ninterface Props   {\r\n    isShown:boolean,\r\n    toggleShow: () => void,\r\n    handleAdd: (a:any) => void\r\n}\r\ninterface IDevice{\r\n    device:string,\r\n    isOn:boolean,\r\n    type:string,\r\n    value:number\r\n}\r\nconst AddDevice: React.FC<Props> = (props:Props) => {\r\n    const [device, setDevice] = useState(\"\");\r\n    // const [name, setName] = useState(\"\");\r\n    const [deviceType, setDeviceType] = useState(\"temperature\");\r\n\r\n    const handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        let data = \r\n            {\r\n            device:device,\r\n            isOn:false,\r\n            type:deviceType,\r\n            value:0\r\n        };\r\n        props.toggleShow();\r\n        props.handleAdd(data);\r\n    }\r\n    const handleChange = (event : React.FormEvent<HTMLInputElement>) => {\r\n        console.log(event.currentTarget.value);\r\n        setDevice(event.currentTarget.value);\r\n    }\r\n    const handleType = (event : React.FormEvent<HTMLInputElement>) => {\r\n        setDeviceType(event.currentTarget.value);\r\n      }\r\n    return(\r\n        <div className=\"secondNavbarSettings\">\r\n            <form  onSubmit={handleSubmit}>\r\n                <label>\r\n                    \r\n                    <input placeholder=\"Device\" type=\"text\" name=\"name\" onChange={handleChange} />\r\n                </label> <br/>\r\n                <label >\r\n                 <h4>Choose type of device's value:</h4> \r\n                  <input checked type=\"radio\" value=\"Temperature\" name=\"type\" onChange={handleType}/> Temperature\r\n                  <input type=\"radio\" value=\"Brightness\" name=\"type\" onChange={handleType}/> Brightness\r\n                  <input type=\"radio\" value=\"Volume\" name=\"type\" onChange={handleType}/> Volume\r\n                </label><br/>\r\n                \r\n                <button type=\"submit\" value=\"Wyślij\"> &#x2714;</button>\r\n            </form>\r\n            \r\n        </div>\r\n        \r\n    );\r\n      \r\n\r\n}\r\n\r\nexport default AddDevice;","import React, { SyntheticEvent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Switch from \"react-switch\";\r\n\r\n\r\ninterface Props {\r\n    id:number\r\n    name: string,\r\n    isOn: boolean,\r\n    type:string,\r\n    value:number,\r\n    handleToggle: (id:number, a:boolean) => void, \r\n}\r\n\r\n\r\nconst DeviceBlock: React.FC<Props> = (props:Props ) =>{\r\n    const [toggleSwitch, setToggleSwitch] = useState(props.isOn)\r\n    \r\n      const handleSwitch = () =>{\r\n        setToggleSwitch(!toggleSwitch);\r\n        props.handleToggle(props.id,!toggleSwitch);\r\n      }\r\n     return  (\r\n        \r\n         <div className=\"deviceBlock\">\r\n             <div className=\"text-left\">\r\n                 <h3>{props.name}</h3>\r\n                 <h5>{props.type}: {props.value}</h5>\r\n            </div>\r\n            \r\n            <span className=\"slider\">\r\n                <Switch onColor='#f57843' offColor=\"#f9a886\" onChange={handleSwitch} checked={toggleSwitch} />\r\n            </span>\r\n            \r\n         </div>\r\n     )\r\n    }\r\n\r\n\r\nexport default DeviceBlock;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport AddDevice from './AddDevice';\r\nimport DeviceBlock from './DeviceBlock';\r\nimport { IRoom } from './Main';\r\n\r\n\r\ntype TParams = { id: string };\r\ninterface Props{\r\n  id:number\r\n}\r\n\r\n\r\nfunction Settings({ match }: RouteComponentProps<TParams>,{id}:Props) {\r\n  //declare states\r\n  const [rooms, setRooms] = useState<IRoom[]>([]);\r\n  // const [devices,setDevices] = useState<IDevice[]>([]);\r\n  // const [deviceType, setDeviceType] = useState(\"temperature\");\r\n  const [isShown, setIsShown] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [randomNumber, setRandomNumber] = useState<number[]>([0,0]);\r\n  var roomId = Number(match.params.id);\r\n\r\n  useEffect(() => {\r\n    setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\r\n    setLoading(false);\r\n },[]);\r\n \r\n  //get two random numbers from API\r\n  useEffect(() => {\r\n    axios.get('https://www.random.org/integers/?num=2&min=1&max=100&col=2&base=10&format=plain&rnd=new')\r\n        .then(res => { \r\n          var random1= Number(res.data.slice(0,2));\r\n          var random2 = Number(res.data.slice(3,5));\r\n           setRandomNumber(randomNumber => [random1 ]);\r\n           setRandomNumber(randomNumber => [...randomNumber,  random2 ]);\r\n          console.log(res.data);\r\n        })\r\n        .catch(err => {\r\n            console.log(err.message);\r\n        })\r\n}, []);\r\n//get rooms from localstorage\r\n  \r\n//update rooms in localstorage when rooms state changed\r\n  useEffect(() => {\r\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n    console.log(\"zmiana\" ); \r\n  },[rooms]);\r\n//handle form - device name\r\n// const handleChange = (event : React.FormEvent<HTMLInputElement>) => {\r\n//   console.log(event.currentTarget.value);\r\n//   setDevice(event.currentTarget.value);\r\n// }\r\n//handle form - device value type \r\n// const handleType = (event : React.FormEvent<HTMLInputElement>) => {\r\n//   console.log(event.currentTarget.value);\r\n//   setDeviceType(event.currentTarget.value);\r\n// }\r\n//handle form submit(add new device)\r\n// const handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n//   event.preventDefault();\r\n//   let data = \r\n//       {\r\n//       device:device,\r\n//       isOn:false,\r\n//       type:deviceType,\r\n//       value:0\r\n//       // deviceDetails:[{type: deviceType},{value:0}]\r\n//   }\r\n//   rooms[roomId].devices = [data];\r\n//   localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n//   toggleShow();\r\n// };\r\n//toggle form \r\nconst toggleShow = () =>{\r\n  setIsShown(!isShown);\r\n}\r\nconst handleAdd = (a:any) => {\r\n  //setRooms(rooms => [...rooms,  rooms.devices[a]);\r\n  // setRooms(\r\n  //   rooms.map((item,i)  => \r\n  //     i === id \r\n  //     ? {...item, devices: [a] } \r\n  //     : item ))\r\n  var b=rooms[roomId].devices;\r\n  b.push(a);\r\n  rooms[roomId].devices = b;\r\n  console.log(rooms[roomId].devices);\r\n  \r\n  // b.push(a);\r\n\r\n  //   rooms[roomId].devices= (...b, a]);\r\n  //  rooms[roomId].devices.push([a])\r\n  // forceupdate()\r\n\r\n   localStorage.setItem('Rooms', JSON.stringify(rooms)); \r\n  \r\n  \r\n}\r\nconst showDevices = () =>{\r\n\r\n  rooms[roomId].devices.map((item, index) => (\r\n    <div>{item.device} </div>\r\n    ))\r\n}\r\n\r\nconst handleToggle = (id:number, a:boolean) => {\r\n\r\n    rooms[roomId].devices[id].isOn = a;\r\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n}\r\n  return (\r\n  <div className=\"settings\">\r\n        {/* <img src=\"./../x.png\" height=\"30px\" width=\"30px\"/> */}\r\n            {/* <div className=\"roomDetails\">Temp:{randomNumber[0]} Humidity: {randomNumber[1]}</div> */}\r\n     {/* <h2>This is a page for product with ID: {match.params.id} </h2>   */}\r\n     {/* <img src={process.env.PUBLIC_URL + '/x.png'} alt=\"logo\" /> */}\r\n\r\n    <div className=\"  navbar-settings\">\r\n      <Link className=\"goBackLink\" to='/SmartHome/'><img src=\"./../leftArrow.png\" height=\"40px\" width=\"40px\" alt=\"GoBack\"/></Link>\r\n\r\n      <div className=\"navbar-info\">\r\n        <h1>{loading ? \"\" : rooms[roomId].name }</h1>\r\n          <div className=\"navbar-temp\">\r\n              <img src=\"./../temp.png\" height=\"50px\" width=\"50px\"/>\r\n              <h3>{randomNumber[0]} &#x2103;</h3>\r\n              <h4>Temp</h4>\r\n          </div>\r\n\r\n            <div className=\"navbar-humidity\">\r\n              <img src=\"./../water.png\" height=\"50px\" width=\"50px\"/>\r\n              <h3>{randomNumber[1]}% </h3>\r\n              <h4>Humidity</h4>\r\n            </div>\r\n            <div className=\"addDeviceButton\" onClick={toggleShow }><h1>+</h1></div>\r\n      </div>\r\n    </div>\r\n    \r\n     \r\n     \r\n\r\n     { isShown ?\r\n       <AddDevice isShown={isShown} toggleShow={toggleShow} handleAdd={handleAdd} />\r\n      :\"\" }\r\n      <div className=\"devices\">\r\n        {loading ? \"wait\" : rooms[roomId].devices.map((item, index) => (\r\n          <DeviceBlock key={index} id={index} name={item.device} isOn={item.isOn} type={item.type} value={item.value} handleToggle={handleToggle} />\r\n        ))}\r\n      </div>\r\n        \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n\r\n\r\n        ","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport { Route,  Switch } from 'react-router-dom'\nimport Settings from './components/Settings';\n\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      \n            <Switch>\n              <Route exact path=\"/SmartHome/\"  component={Main} />\n              <Route exact path=\"/SmartHome/settings/:id\" component={Settings} />\n            </Switch>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n        <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}