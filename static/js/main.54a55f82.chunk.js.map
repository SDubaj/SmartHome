{"version":3,"sources":["components/AddRoom.tsx","components/RoomBlock.tsx","components/RoomBlocks.tsx","components/Main.tsx","components/AddDevice.tsx","components/DeviceBlock.tsx","components/Settings.tsx","App.tsx","index.tsx"],"names":["AddRoom","props","useState","name","setName","className","onSubmit","event","preventDefault","data","isOn","devices","toggleShow","handleAdd","placeholder","type","onChange","currentTarget","value","RoomBlock","toggleSwitch","setToggleSwitch","device","length","onColor","offColor","checked","handleToggle","id","to","src","height","width","alt","onClick","window","confirm","handleDelete","RoomBlocks","rooms","map","item","index","key","Main","setRooms","show","setShow","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","a","splice","i","AddDevice","setDevice","deviceType","setDeviceType","handleType","defaultChecked","DeviceBlock","setValue","handleSetValue","variant","tooltip","Settings","match","isShown","setIsShown","loading","setLoading","randomNumber","setRandomNumber","roomId","Number","params","axios","get","then","res","random1","slice","random2","catch","err","console","log","message","b","push","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54a55f82.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { IHandleAddRoom } from './Main';\n\ninterface Props extends IHandleAddRoom {\n    show:boolean,\n    toggleShow: () => void,\n    handleAdd: (a:any) => void\n}\n\nconst AddRoom: React.FC<Props>  = (props:Props) =>{\n    const [name, setName] = useState(\"\");\n    const handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        let data = \n            {\n            name:name,\n            isOn:false,\n            devices:[]\n        }\n        props.toggleShow();\n        props.handleAdd(data);\n    }\n    const handleChange = (event : React.FormEvent<HTMLInputElement>) => {\n        setName(event.currentTarget.value);\n    }\n    return(\n        <div className=\"second-navbar\">\n            <div className=\"addRoomTitle\"><h2>Add room</h2></div>\n            <form  onSubmit={handleSubmit}>\n                \n                \n                <label>\n                    <input placeholder=\"Name\" type=\"text\" name=\"name\" onChange={handleChange} />\n                </label>\n                <button type=\"submit\" value=\"Send\">&#x2714;</button>\n            </form>\n            \n            </div>\n        \n    );\n      \n\n}\n\nexport default AddRoom;","import React, { SyntheticEvent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport { IHandles } from './Main';\n\ninterface Props extends IHandles  {\n    name: string,\n    isOn: boolean,\n    id:number,\n    device?:any\n}\n\n\nconst RoomBlock: React.FC<Props> = (props:Props ) =>{\n    const [toggleSwitch, setToggleSwitch] = useState(props.isOn);\n    // const [devicesAmount, setDevicesAmount] = useState(0);\n    // Switching room  - ON or OFF\n    const handleChange = (checked: boolean, event: MouseEvent | SyntheticEvent<MouseEvent | KeyboardEvent, Event>) => {\n        setToggleSwitch(!toggleSwitch);\n        props.handleToggle(props.id,!toggleSwitch);\n    }\n    // Deleting rooms \n    const handleDelete = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) =>{\n        if (window.confirm('Are you sure you wish to delete this room?')){\n        props.handleDelete(props.id);\n        }\n    }\n     return  (\n         <div className=\"roomBlock\">       \n                <h2>{props.name}</h2> \n                <h4 className=\"devicesAmount\">Devices:{props.device.length}</h4>      \n                {/* <span> ON/OFF</span> */}\n\n            <div className=\"roomOptions\">\n                <Switch onColor='#f57843' offColor=\"#f9a886\" onChange={handleChange} checked={toggleSwitch} />\n                <Link to={`/SmartHome/settings/${props.id}`} >\n                    <img src=\"settings.png\" height=\"30px\" width=\"30px\" alt=\"settingsIcon\"/>\n                </Link>\n                <div className=\"close\" onClick={handleDelete}>\n                    <img src=\"x.png\" height=\"30px\" width=\"30px\" alt=\"closeIcon\"/>\n                </div> \n            </div>\n         </div>\n     )\n    }\n\n\nexport default RoomBlock;","import React from 'react';\nimport { IHandles, IRoom } from './Main';\nimport RoomBlock from './RoomBlock';\n\n  interface RoomProps extends IHandles {\n      rooms:IRoom[]\n  }\n\n  //displaying blocks of rooms in main view\nconst RoomBlocks: React.FC<RoomProps> = (props:RoomProps ) =>{\n        return(\n      \n          <div className=\"flex-wrap\" >\n              {props.rooms.map((item, index) => (\n              <RoomBlock key={index} id={index} name={item.name} device={item.devices} isOn={item.isOn} handleDelete={props.handleDelete} handleToggle={props.handleToggle} />\n              ))}\n          </div>\n     \n  )\n\n}\n\nexport default RoomBlocks;","import React, { useEffect, useState } from 'react';\nimport AddRoom from './AddRoom';\nimport RoomBlocks from './RoomBlocks';\n\n// interface roomsType{\n//     name:string,\n//     isOn:boolean\n// }\n//device interface\nexport interface Devices{\n  device:string,\n  isOn:boolean,\n  type:string,\n  value:number\n}\n\n//room interface\nexport interface IRoom{\n  name:string,\n  isOn:boolean,\n  devices: [Devices]\n}\n//interface with room handlers - delete / toggle\nexport interface IHandles{\n  handleDelete: (a:any) => void,\n  handleToggle: (id:number, a:boolean) => void, \n}\n// interface with room handlers - addRoom , showForm\nexport interface IHandleAddRoom{\n  toggleShow: () => void,\n  handleAdd: (a:any) => void\n}\n\n\nconst Main = () =>{\n\n    //declare states\n    const [rooms, setRooms] = useState<IRoom[]>([]);\n    const [show, setShow] = useState(false);\n  //get rooms from localstorage\n    useEffect(() => {\n        setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\n      },[]);\n\n    //set data to localstorage when rooms state changes\n    useEffect(() => {\n      localStorage.setItem('Rooms', JSON.stringify(rooms));\n    },[rooms]);\n  \n    //toggle form show\n  const toggleShow = () =>{\n      setShow(!show);\n  }\n  //add new room to room state\n  const handleAdd = (a:any) => {\n      setRooms(rooms => [...rooms,  a ]);\n  }\n  //Switch ON/OFF room with id\n  const handleToggle = (id:number, a:boolean) => {\n    setRooms(\n    rooms.map((item,i)  => \n      i === id \n      ? {...item, isOn : !item.isOn} \n      : item ))\n      \n      \n      rooms.map((item)=>\n      item.devices.map((item)=>\n        item.isOn = a\n      )\n    )\n  }\n\n  //Delete room and update localstorage\n  const handleDelete= (a:any) => {\n    setRooms(rooms.splice(a,1))\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\n    setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'))\n}\n\n    return(\n      <div>\n        \n          <div className=\"navbar navbar-light\">\n             <img src=\"user.png\" height=\"50px\" width=\"50px\" alt=\"userIcon\"></img>\n             <h1>Hi user!</h1>\n             <h3>Welcome to home ! </h3> \n           <button className=\"addButton\" onClick={toggleShow }>+</button>\n        \n          </div>\n\n        <div>\n           {/* if show is true show form */}\n           {show ? <AddRoom show={show} toggleShow={toggleShow} handleAdd={handleAdd}/> : \"\"} \n        </div>\n            \n        \n            {/* display rooms */}\n            <RoomBlocks rooms={rooms} handleDelete={handleDelete} handleToggle={handleToggle} />\n          \n          \n      </div>\n        \n    );\n      \n\n}\n\nexport default Main;","import React, { useState } from 'react';\r\n// import { IHandleAddRoom } from './Main';\r\n\r\ninterface Props   {\r\n    isShown:boolean,\r\n    toggleShow: () => void,\r\n    handleAdd: (a:any) => void\r\n}\r\ninterface IDevice{\r\n    device:string,\r\n    isOn:boolean,\r\n    type:string,\r\n    value:number\r\n}\r\nconst AddDevice: React.FC<Props> = (props:Props) => {\r\n    const [device, setDevice] = useState(\"\");\r\n    // const [name, setName] = useState(\"\");\r\n    const [deviceType, setDeviceType] = useState(\"temperature\");\r\n\r\n    const handleSubmit = (event : React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        let data = \r\n            {\r\n            device:device,\r\n            isOn:false,\r\n            type:deviceType,\r\n            value:0\r\n        };\r\n        props.toggleShow();\r\n        props.handleAdd(data);\r\n    }\r\n    const handleChange = (event : React.FormEvent<HTMLInputElement>) => {\r\n        \r\n        setDevice(event.currentTarget.value);\r\n    }\r\n    const handleType = (event : React.FormEvent<HTMLInputElement>) => {\r\n        setDeviceType(event.currentTarget.value);\r\n      }\r\n    return(\r\n        <div className=\"secondNavbarSettings\">\r\n            <form  onSubmit={handleSubmit}>\r\n                <label>\r\n                    \r\n                    <input className=\"deviceInput\" placeholder=\"Device\" type=\"text\" name=\"name\" onChange={handleChange} />\r\n                </label> <br/>\r\n                <label >\r\n                 <h4>Choose type of device's value:</h4> \r\n                  <input className=\"radioButton\"  type=\"radio\" value=\"Temperature\" name=\"type\" onChange={handleType} defaultChecked /> Temperature \r\n                  <input className=\"radioButton\" type=\"radio\" value=\"Brightness\" name=\"type\" onChange={handleType}/> Brightness \r\n                  <input className=\"radioButton\" type=\"radio\" value=\"Volume\" name=\"type\" onChange={handleType}/> Volume \r\n                </label><br/>\r\n                \r\n                <button type=\"submit\" value=\"Wyślij\"> &#x2714;</button>\r\n            </form>\r\n            \r\n        </div>\r\n        \r\n    );\r\n      \r\n\r\n}\r\n\r\nexport default AddDevice;","import React, {  useState } from 'react';\r\nimport Switch from \"react-switch\";\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport { IHandles } from './Main';\r\n\r\n\r\ninterface Props extends IHandles {\r\n    id:number\r\n    name: string,\r\n    isOn: boolean,\r\n    type:string,\r\n    value:number,\r\n    // handleToggle: (id:number, a:boolean) => void,\r\n    handleSetValue: (id:number,value:number) => void,\r\n     \r\n}\r\n\r\n\r\nconst DeviceBlock: React.FC<Props> = (props:Props ) =>{\r\n    const [toggleSwitch, setToggleSwitch] = useState(props.isOn);\r\n    const [ value, setValue ] = useState(props.value); \r\n    \r\n      const handleSwitch = () =>{\r\n        setToggleSwitch(!toggleSwitch);\r\n        props.handleToggle(props.id,!toggleSwitch);\r\n      }\r\n      const handleSlider = (event: React.ChangeEvent<HTMLInputElement>,value: number) =>{\r\n        setValue(value);\r\n        props.handleSetValue(props.id, value);\r\n      }\r\n      const handleDelete = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) =>{\r\n        if (window.confirm('Are you sure you wish to delete this room?')){\r\n        props.handleDelete(props.id);\r\n        }\r\n    }\r\n\r\n\r\n     return  (\r\n        \r\n         <div className=\"deviceBlock\">\r\n             <div className=\"text-left\">\r\n                 <h3>{props.name}</h3>\r\n                 <h5>{props.type}: {value}</h5>\r\n            </div>\r\n            \r\n            <span className=\"slider\">\r\n                <Switch onColor='#f57843'\r\n                    offColor=\"#f9a886\" \r\n                    onChange={handleSwitch}\r\n                    checked={toggleSwitch} \r\n                  />\r\n                  \r\n                  {/* <div className=\"closeDevice\" ><img src=\"./../x.png\" height=\"30px\" width=\"30px\"/></div> */}\r\n            </span>\r\n            <div className=\"addButton\" onClick={handleDelete}>\r\n                <img src=\"./../x.png\" height=\"30px\" width=\"30px\" alt=\"closeIcon\"/>\r\n            </div>\r\n            \r\n                <RangeSlider\r\n                    value={value}\r\n                    onChange={handleSlider}\r\n                    variant=\"warning\"\r\n                    tooltip=\"off\"\r\n                />\r\n            \r\n         </div>\r\n     )\r\n    }\r\n\r\n\r\nexport default DeviceBlock;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport AddDevice from './AddDevice';\r\nimport DeviceBlock from './DeviceBlock';\r\nimport { IRoom } from './Main';\r\n\r\n\r\ntype TParams = { id: string };\r\ninterface Props{\r\n  id:number\r\n}\r\n\r\n\r\nfunction Settings({ match }: RouteComponentProps<TParams>,{id}:Props) {\r\n  //declare states\r\n  const [rooms, setRooms] = useState<IRoom[]>([]);\r\n  // const [devices,setDevices] = useState<IDevice[]>([]);\r\n  // const [deviceType, setDeviceType] = useState(\"temperature\");\r\n  const [isShown, setIsShown] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [randomNumber, setRandomNumber] = useState<number[]>([0,0]);\r\n  var roomId = Number(match.params.id);\r\n\r\n  useEffect(() => {\r\n    setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'));\r\n    setLoading(false);\r\n },[]);\r\n \r\n  //get two random numbers from API\r\n  useEffect(() => {\r\n    axios.get('https://www.random.org/integers/?num=2&min=0&max=50&col=2&base=10&format=plain&rnd=new')\r\n        .then(res => { \r\n          var random1= Number(res.data.slice(0,2));\r\n          var random2 = Number(res.data.slice(3,5));\r\n           setRandomNumber(randomNumber => [random1 ]);\r\n           setRandomNumber(randomNumber => [...randomNumber,  random2 ]);\r\n          //console.log(res.data);\r\n        })\r\n        .catch(err => {\r\n            console.log(err.message);\r\n        })\r\n}, []);\r\n//get rooms from localstorage\r\n  \r\n//update rooms in localstorage when rooms state changed\r\n  useEffect(() => {\r\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n  },[rooms]);\r\n//handle form - device name\r\n\r\n//toggle form \r\nconst toggleShow = () =>{\r\n  setIsShown(!isShown);\r\n}\r\nconst handleSetValue = (id:number,a:number) => {\r\n  console.log(rooms[roomId].devices[id].value);\r\n  rooms[roomId].devices[id].value = a;\r\n  localStorage.setItem('Rooms', JSON.stringify(rooms)); \r\n}\r\nconst handleAdd = (a:any) => {\r\n  var b=rooms[roomId].devices;\r\n  b.push(a);\r\n  rooms[roomId].devices = b;\r\n  localStorage.setItem('Rooms', JSON.stringify(rooms)); \r\n}\r\n\r\nconst handleDelete= (a:any) => {\r\n  rooms[roomId].devices.splice(a,1)\r\n  localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n  setRooms(JSON.parse(localStorage.getItem('Rooms') || '[]'))\r\n}\r\n\r\nconst handleToggle = (id:number, a:boolean) => {\r\n    rooms[roomId].devices[id].isOn = a;\r\n    localStorage.setItem('Rooms', JSON.stringify(rooms));\r\n}\r\n  return (\r\n  <div className=\"settings\">\r\n    <div className=\"  navbar-settings\">\r\n\r\n      <Link className=\"goBackLink\" to='/SmartHome/'>\r\n        <img src=\"./../leftArrow.png\" height=\"40px\" width=\"40px\" alt=\"GoBack\" />\r\n      </Link>\r\n\r\n      <div className=\"navbar-info\">\r\n        <h1>{loading ? \"\" : rooms[roomId].name }</h1>\r\n\r\n          <div className=\"navbar-temp\">\r\n              <img src=\"./../temp.png\" height=\"50px\" width=\"50px\" alt=\"tempIcon\"/>\r\n              <h3>{randomNumber[0]} &#x2103;</h3>\r\n              <h4>Temp</h4>\r\n          </div>\r\n\r\n            <div className=\"navbar-humidity\">\r\n              <img src=\"./../water.png\" height=\"50px\" width=\"50px\" alt=\"waterIcon\"/>\r\n              <h3>{randomNumber[1]}% </h3>\r\n              <h4>Humidity</h4>\r\n            </div>\r\n\r\n            <div className=\"addDeviceButton\" onClick={toggleShow }><h1>+</h1></div>\r\n      </div>\r\n    </div>\r\n\r\n    {/* Show form to add new device */}\r\n     { isShown ?\r\n       <AddDevice isShown={isShown} toggleShow={toggleShow} handleAdd={handleAdd} />\r\n      :\"\" }\r\n      \r\n      {/* Display all devices */}\r\n      <div className=\"devices\">\r\n        {loading ? \"wait\" : rooms[roomId].devices.map((item, index) => (\r\n          <DeviceBlock \r\n          key={index} \r\n          id={index}\r\n          name={item.device}\r\n          isOn={item.isOn} \r\n          type={item.type} \r\n          value={item.value} \r\n          handleToggle={handleToggle}\r\n          handleSetValue={handleSetValue}\r\n          handleDelete={handleDelete} />\r\n        ))}\r\n      </div>\r\n        \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n\r\n\r\n        ","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport { Route,  Switch } from 'react-router-dom'\nimport Settings from './components/Settings';\n\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      \n            <Switch>\n              <Route exact path=\"/SmartHome/\"  component={Main} />\n              <Route exact path=\"/SmartHome/settings/:id\" component={Settings} />\n            </Switch>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n        <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}